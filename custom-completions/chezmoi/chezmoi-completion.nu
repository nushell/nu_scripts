# Autogenerated Nushell completion script for chezmoi

# Manage your dotfiles across multiple diverse machines, securely
export extern "chezmoi" [
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --help(-h) # help for chezmoi
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --version # version for chezmoi
  --working-tree(-W): path # Set working tree directory
]

# Add an existing file, directory, or symlink to the source state
export extern "chezmoi add" [
  --autotemplate # Generate the template when adding files as templates
  --create # Add files that should exist, irrespective of their contents
  --encrypt # Encrypt files
  --exact # Add directories exactly
  --exclude(-x): string@"nu-complete types" # Exclude entry types (default none)
  --follow # Add symlink targets instead of symlinks
  --help(-h) # help for add
  --include(-i): string@"nu-complete types" # Include entry types (default all)
  --prompt # Prompt before adding each entry
  --quiet # Suppress warnings
  --recursive(-r) # Recurse into subdirectories (default true)
  --secrets # Scan for secrets when adding unencrypted files (default warning)
  --template # Add files as templates
  --template-symlinks # Add symlinks with target in source or home dirs as templates
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# Interact with age
export extern "chezmoi age" [
  --help(-h) # help for age
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# Update the destination directory to match the target state
export extern "chezmoi apply" [
  --exclude(-x): string@"nu-complete types" # Exclude entry types (default none)
  --help(-h) # help for apply
  --include(-i): string@"nu-complete types" # Include entry types (default all)
  --init # Recreate config file from template
  --parent-dirs(-P) # Apply all parent directories
  --recursive(-r) # Recurse into subdirectories (default true)
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# Generate a tar archive of the target state
export extern "chezmoi archive" [
  --exclude(-x): string@"nu-complete types" # Exclude entry types (default none)
  --format # Set archive format (default tar.gz)
  --gzip # Compress output with gzip
  --help(-h) # help for archive
  --include(-i): string@"nu-complete types" # Include entry types (default none)
  --init # Recreate config file from template
  --parent-dirs(-P) # Archive parent directories
  --recursive(-r) # Recurse into subdirectories (default true)
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# Print the target contents of a file, script, or symlink
export extern "chezmoi cat" [
  --help(-h) # help for cat
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# Print the configuration file
export extern "chezmoi cat-config" [
  --help(-h) # help for cat-config
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# Launch a shell in the source directory
export extern "chezmoi cd" [
  --help(-h) # help for cd
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# Change the attributes of a target in the source state
export extern "chezmoi chattr" [
  --help(-h) # help for chattr
  --recursive(-r) # Recurse into subdirectories
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# Generate shell completion code
export extern "chezmoi completion" [
  --help(-h) # help for completion
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# Print the template data
export extern "chezmoi data" [
  --format: string@"nu-complete output-format" # Output format
  --help(-h) # help for data
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# Decrypt file or standard input
export extern "chezmoi decrypt" [
  --help(-h) # help for decrypt
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# Permanently delete an entry from the source state, the destination directory, and the state
export extern "chezmoi destroy" [
  --help(-h) # help for destroy
  --recursive(-r) # Recurse into subdirectories
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# Print the diff between the target state and the destination state
export extern "chezmoi diff" [
  --exclude(-x): string@"nu-complete types" # Exclude entry types (default none)
  --help(-h) # help for diff
  --include(-i): string@"nu-complete types" # Include entry types (default all)
  --init # Recreate config file from template
  --pager # Set pager (default "\x00")
  --parent-dirs(-P) # Print the diff of all parent directories
  --recursive(-r) # Recurse into subdirectories
  --reverse # Reverse the direction of the diff
  --script-contents # Show script contents (default true)
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# Check your system for potential problems
export extern "chezmoi doctor" [
  --help(-h) # help for doctor
  --no-network # do not use network connection
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# Generate a dump of the target state
export extern "chezmoi dump" [
  --exclude(-x): string@"nu-complete types" # Exclude entry types (default none)
  --format: string@"nu-complete output-format" # Output format
  --help(-h) # help for dump
  --include(-i): string@"nu-complete types" # Include entry types (default all)
  --init # Recreate config file from template
  --parent-dirs(-P) # Dump all parent directories
  --recursive(-r) # Recurse into subdirectories (default true)
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# Dump the configuration values
export extern "chezmoi dump-config" [
  --format: string@"nu-complete output-format" # Output format
  --help(-h) # help for dump-config
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# Edit the source state of a target
export extern "chezmoi edit" [
  --apply # Apply after editing
  --exclude(-x): string@"nu-complete types" # Exclude entry types (default none)
  --hardlink # Invoke editor with a hardlink to the source file (default true)
  --help(-h) # help for edit
  --include(-i): string@"nu-complete types" # Include entry types (default all)
  --init # Recreate config file from template
  --watch # Apply on save
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# Edit the configuration file
export extern "chezmoi edit-config" [
  --help(-h) # help for edit-config
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# Edit the configuration file template
export extern "chezmoi edit-config-template" [
  --help(-h) # help for edit-config-template
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# Encrypt file or standard input
export extern "chezmoi encrypt" [
  --help(-h) # help for encrypt
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# Execute the given template(s)
export extern "chezmoi execute-template" [
  --file # Treat arguments as filenames
  --help(-h) # help for execute-template
  --init # Simulate chezmoi init
  --left-delimiter # Set left template delimiter
  --promptBool # Simulate promptBool (default [])
  --promptChoice # Simulate promptChoice (default [])
  --promptInt # Simulate promptInt (default [])
  --promptMultichoice # Simulate promptMultichoice (default [])
  --promptString # Simulate promptString (default [])
  --right-delimiter # Set right template delimiter
  --stdinisatty # Simulate stdinIsATTY (default true)
  --with-stdin # Set .chezmoi.stdin to the contents of the standard input
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# Remove a target from the source state
export extern "chezmoi forget" [
  --help(-h) # help for forget
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# Generate a file for use with chezmoi
export extern "chezmoi generate" [
  --help(-h) # help for generate
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# Run git in the source directory
export extern "chezmoi git" [
  --help(-h) # help for git
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# Print ignored targets
export extern "chezmoi ignored" [
  --help(-h) # help for ignored
  --tree # Print paths as a tree
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# Import an archive into the source state
export extern "chezmoi import" [
  --destination(-D): path # Set destination prefix
  --exact # Set exact_ attribute on imported directories
  --exclude(-x): string@"nu-complete types" # Exclude entry types (default none)
  --help(-h) # help for import
  --include(-i): string@"nu-complete types" # Include entry types (default all)
  --remove-destination # Remove destination before import
  --strip-components # Strip leading path components
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# Setup the source directory and update the destination directory to match the target state
export extern "chezmoi init" [
  --apply # Update destination directory
  --branch # Set initial branch to checkout
  --config-path # Path to write generated config file
  --data # Include existing template data (default true)
  --depth # Create a shallow clone
  --exclude(-x): string@"nu-complete types" # Exclude entry types (default none)
  --git-lfs # Run git pull lfs after cloning
  --guess-repo-url # Guess the repo URL (default true)
  --help(-h) # help for init
  --include(-i): string@"nu-complete types" # Include entry types (default all)
  --one-shot # Run in one-shot mode
  --prompt # Force prompt*Once template functions to prompt
  --promptBool # Populate promptBool (default [])
  --promptChoice # Populate promptChoice (default [])
  --promptDefaults # Make prompt functions return default values
  --promptInt # Populate promptInt (default [])
  --promptMultichoice # Populate promptMultichoice (default [])
  --promptString # Populate promptString (default [])
  --purge # Purge config and source directories after running
  --purge-binary # Purge chezmoi binary after running
  --recurse-submodules # Checkout submodules recursively (default true)
  --ssh # Use ssh instead of https when guessing repo URL
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# Print license
export extern "chezmoi license" [
  --help(-h) # help for license
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# List the managed entries in the destination directory
export extern "chezmoi managed" [
  --exclude(-x): string@"nu-complete types" # Exclude entry types (default none)
  --format # Format (default json)
  --help(-h) # help for managed
  --include(-i): string@"nu-complete types" # Include entry types (default all)
  --path-style: string@"nu-complete path-style" # Path style (default relative)
  --tree # Print paths as a tree
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# Perform a three-way merge between the destination state, the source state, and the target state
export extern "chezmoi merge" [
  --help(-h) # help for merge
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# Perform a three-way merge for each modified file
export extern "chezmoi merge-all" [
  --help(-h) # help for merge-all
  --init # Recreate config file from template
  --recursive(-r) # Recurse into subdirectories (default true)
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# Purge chezmoi's configuration and data
export extern "chezmoi purge" [
  --binary # Purge chezmoi binary
  --help(-h) # help for purge
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# Re-add modified files
export extern "chezmoi re-add" [
  --exclude(-x): string@"nu-complete types" # Exclude entry types (default none)
  --help(-h) # help for re-add
  --include(-i): string@"nu-complete types" # Include entry types (default all)
  --recursive(-r) # Recurse into subdirectories (default true)
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# Interact with a secret manager
export extern "chezmoi secret" [
  --help(-h) # help for secret
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# Print the source path of a target
export extern "chezmoi source-path" [
  --help(-h) # help for source-path
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# Manipulate the persistent state
export extern "chezmoi state" [
  --help(-h) # help for state
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# Show the status of targets
export extern "chezmoi status" [
  --exclude(-x): string@"nu-complete types" # Exclude entry types (default none)
  --help(-h) # help for status
  --include(-i): string@"nu-complete types" # Include entry types (default all)
  --init # Recreate config file from template
  --parent-dirs(-P) # Show status of all parent directories
  --path-style: string@"nu-complete path-style" # Path style (default relative)
  --recursive(-r) # Recurse into subdirectories (default true)
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# Print the target path of a source path
export extern "chezmoi target-path" [
  --help(-h) # help for target-path
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# List the unmanaged files in the destination directory
export extern "chezmoi unmanaged" [
  --help(-h) # help for unmanaged
  --path-style: string@"nu-complete path-style" # Path style (default relative)
  --tree # Print paths as a tree
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# Pull and apply any changes
export extern "chezmoi update" [
  --apply # Apply after pulling (default true)
  --exclude(-x): string@"nu-complete types" # Exclude entry types (default none)
  --help(-h) # help for update
  --include(-i): string@"nu-complete types" # Include entry types (default all)
  --init # Recreate config file from template
  --parent-dirs(-P) # Update all parent directories
  --recurse-submodules # Recursively update submodules (default true)
  --recursive(-r) # Recurse into subdirectories (default true)
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# Upgrade chezmoi to the latest released version
export extern "chezmoi upgrade" [
  --executable # Set executable to replace
  --help(-h) # help for upgrade
  --method # Set upgrade method
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

# Exit with success if the destination state matches the target state, fail otherwise
export extern "chezmoi verify" [
  --exclude(-x): string@"nu-complete types" # Exclude entry types (default none)
  --help(-h) # help for verify
  --include(-i): string@"nu-complete types" # Include entry types (default all)
  --init # Recreate config file from template
  --parent-dirs(-P) # Verify all parent directories
  --recursive(-r) # Recurse into subdirectories (default true)
  --cache: path # Set cache directory
  --color: string@"nu-complete bool" # Colorize output (default auto)
  --config(-c): path # Set config file
  --config-format: string@"nu-complete format" # Set config file format
  --debug # Include debug information in output
  --destination(-D): path # Set destination directory
  --dry-run(-n) # Do not make any modifications to the destination directory
  --force # Make all changes without prompting
  --interactive # Prompt for all changes
  --keep-going(-k) # Keep going as far as possible after an error
  --mode: string@"nu-complete mode" # Mode (default file)
  --no-pager # Do not use the pager
  --no-tty # Do not attempt to get a TTY for prompts
  --output(-o): path # Write output to path instead of stdout
  --persistent-state: path # Set persistent state file
  --progress: string@"nu-complete bool" # Display progress bars (default auto)
  --refresh-externals(-R): string@"nu-complete state" # Refresh external cache (default auto)
  --source(-S): path # Set source directory
  --source-path # Specify targets by source path
  --use-builtin-age: string@"nu-complete bool" # Use builtin age (default auto)
  --use-builtin-diff # Use builtin diff
  --use-builtin-git: string@"nu-complete bool" # Use builtin git (default auto)
  --verbose(-v) # Make output more verbose
  --working-tree(-W): path # Set working tree directory
]

def "nu-complete types" [] {
  [all none dirs files remove scripts symlinks always templates encrypted externals templates]
}

def "nu-complete format" [] {
  [json toml yaml]
}

def "nu-complete output-format" [] {
  [json yaml]
}

def "nu-complete mode" [] {
  [file symlink]
}

def "nu-complete state" [] {
  [always auto never]
}

def "nu-complete bool" [] {
  ["'true'" "'false'" auto]
}

def "nu-complete log" [] {
  [error ignore warning]
}

def "nu-complete path-style" [] {
  [absolute all relative source-absolute source-relative]
}
